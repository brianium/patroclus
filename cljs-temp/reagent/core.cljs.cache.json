["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$assert-js-object","~$reagent.debug","~$assert-some","^6","~$assert-new-state","^6","~$dbg","^6","~$prn","^6","~$assert-component","^6","~$assert-callable","^6"],"~:excludes",["~#set",["~$atom","~$flush","~$partial"]],"~:name","~$reagent.core","~:imports",null,"~:requires",["^ ","~$reagent.impl.util","^F","~$dom","~$reagent.dom","~$comp","~$reagent.impl.component","~$reagent.ratom","^K","~$react","^L","~$reagent.impl.template","^M","~$reagent.impl.batching","^N","^J","^J","~$util","^F","~$tmpl","^M","~$ratom","^K","~$deb","^6","~$batch","^N","^6","^6","^H","^H"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$class-names",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","~:line",219,"~:column",7,"~:end-line",219,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^14",[[],["~$class"],["~$class1","~$class2"],["^17","^18","~$&","~$others"]]]]],"~:doc","Function which normalizes and combines class values to a string\n\n  Reagent allows classes to be defined as:\n  - Strings\n  - Named objects (Symbols or Keywords)\n  - Collections of previous types","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",["^14",[[],["^16"],["^17","^18"]]],"^13",["^14",[[],["^16"],["^17","^18"],["^17","^18","~$&","^19"]]],"~:arglists-meta",["^14",[null,null,null,null]]]],"^B","~$reagent.core/class-names","^Z","cljs-temp/reagent/core.cljs","^12",18,"^1;",["^ ","^1<",true,"^1=",2,"^1>",2,"^1?",["^14",[[],["^16"],["^17","^18"]]],"^13",["^14",[[],["^16"],["^17","^18"],["^17","^18","~$&","^19"]]],"^1@",["^14",[null,null,null,null]]],"^1?",["^14",[[],["^16"],["^17","^18"]]],"~:protocol-impl",null,"^1=",2,"^1@",["^14",[null,null,null,null]],"^10",1,"^1<",true,"~:methods",[["^ ","^1=",0,"^1<",false,"~:tag","~$clj-nil"],["^ ","^1=",1,"^1<",false,"^1D",["^>",[null,"~$string","^1E"]]],["^ ","^1=",2,"^1<",false,"^1D",["^>",[null,"^1F","^1E"]]],["^ ","^1=",2,"^1<",true,"^1D","~$any"]],"^[",219,"^11",219,"^1>",2,"~:fn-var",true,"^13",["^14",[[],["^16"],["^17","^18"],["^17","^18","~$&","^19"]]],"^1:","Function which normalizes and combines class values to a string\n\n  Reagent allows classes to be defined as:\n  - Strings\n  - Named objects (Symbols or Keywords)\n  - Collections of previous types"],"~$after-render",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",379,"^10",7,"^11",379,"^12",19,"^13",["^14",["^15",["^14",[["~$f"]]]]],"^1:","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after any queued renders in the next animation\n  frame (and even if no renders actually occur)."],"^B","~$reagent.core/after-render","^Z","cljs-temp/reagent/core.cljs","^12",19,"^1?",["^14",[["~$f"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",379,"~:ret-tag","^1G","^11",379,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["~$f"]]]]],"^1:","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after any queued renders in the next animation\n  frame (and even if no renders actually occur)."],"~$current-component",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",149,"^10",7,"^11",149,"^12",24,"^13",["^14",["^15",["^14",[[]]]]],"^1:","Returns the current React component (a.k.a `this`) in a component\n  function."],"^B","~$reagent.core/current-component","^Z","cljs-temp/reagent/core.cljs","^12",24,"^1?",["^14",[[]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",149,"^1K","^1G","^11",149,"^1>",0,"^1H",true,"^13",["^14",["^15",["^14",[[]]]]],"^1:","Returns the current React component (a.k.a `this`) in a component\n  function."],"~$as-component",["^ ","^B","~$reagent.core/as-component","^Z","cljs-temp/reagent/core.cljs","^[",87,"^10",1,"^11",87,"^12",18,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",87,"^10",6,"^11",87,"^12",18]],"~$adapt-react-class",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",53,"^10",7,"^11",53,"^12",24,"^13",["^14",["^15",["^14",[["~$c"]]]]],"^1:","Returns an adapter for a native React class, that may be used\n  just like a Reagent component function or class in Hiccup forms."],"^B","~$reagent.core/adapt-react-class","^Z","cljs-temp/reagent/core.cljs","^12",24,"^1?",["^14",[["~$c"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",53,"^1K","~$reagent.impl.template/NativeWrapper","^11",53,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["~$c"]]]]],"^1:","Returns an adapter for a native React class, that may be used\n  just like a Reagent component function or class in Hiccup forms."],"^?",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",251,"^10",7,"^11",251,"^12",11,"^13",["^14",["^15",["^14",[["~$x"],["~$x","~$&","~$rest"]]]]],"^1:","Like clojure.core/atom, except that it keeps track of derefs.\n  Reagent components that derefs one of these are automatically\n  re-rendered.","^1;",["^ ","^1<",true,"^1=",1,"^1>",1,"^1?",["^14",[["~$x"]]],"^13",["^14",[["~$x"],["~$x","~$&","^1S"]]],"^1@",["^14",[null,null]]]],"^B","~$reagent.core/atom","^Z","cljs-temp/reagent/core.cljs","^12",11,"^1;",["^ ","^1<",true,"^1=",1,"^1>",1,"^1?",["^14",[["~$x"]]],"^13",["^14",[["~$x"],["~$x","~$&","^1S"]]],"^1@",["^14",[null,null]]],"^1?",["^14",[["~$x"]]],"^1B",null,"^1=",1,"^1@",["^14",[null,null]],"^10",1,"^1<",true,"^1C",[["^ ","^1=",1,"^1<",false,"^1D","~$reagent.ratom/RAtom"],["^ ","^1=",1,"^1<",true,"^1D","^1G"]],"^[",251,"^11",251,"^1>",1,"^1H",true,"^13",["^14",[["~$x"],["~$x","~$&","^1S"]]],"^1:","Like clojure.core/atom, except that it keeps track of derefs.\n  Reagent components that derefs one of these are automatically\n  re-rendered."],"~$merge-props",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",231,"^10",7,"^11",231,"^12",18,"^13",["^14",["^15",["^14",[[],["~$defaults"],["^1W","~$props"],["^1W","^1X","~$&","^19"]]]]],"^1:","Utility function that merges some maps, handling `:class` and `:style`.\n\n  The :class value is always normalized (using `class-names`) even if no\n  merging is done.","^1;",["^ ","^1<",true,"^1=",2,"^1>",2,"^1?",["^14",[[],["^1W"],["^1W","^1X"]]],"^13",["^14",[[],["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^19"]]],"^1@",["^14",[null,null,null,null]]]],"^B","~$reagent.core/merge-props","^Z","cljs-temp/reagent/core.cljs","^12",18,"^1;",["^ ","^1<",true,"^1=",2,"^1>",2,"^1?",["^14",[[],["^1W"],["^1W","^1X"]]],"^13",["^14",[[],["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^19"]]],"^1@",["^14",[null,null,null,null]]],"^1?",["^14",[[],["^1W"],["^1W","^1X"]]],"^1B",null,"^1=",2,"^1@",["^14",[null,null,null,null]],"^10",1,"^1<",true,"^1C",[["^ ","^1=",0,"^1<",false,"^1D","^1E"],["^ ","^1=",1,"^1<",false,"^1D",["^>",[null,"~$clj","^1G"]]],["^ ","^1=",2,"^1<",false,"^1D",["^>",[null,"^1Z","^1G","^1E"]]],["^ ","^1=",2,"^1<",true,"^1D","^1G"]],"^[",231,"^11",231,"^1>",2,"^1H",true,"^13",["^14",[[],["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^19"]]],"^1:","Utility function that merges some maps, handling `:class` and `:style`.\n\n  The :class value is always normalized (using `class-names`) even if no\n  merging is done."],"~$force-update-all",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",90,"^10",7,"^11",90,"^12",23,"^13",["^14",["^15",["^14",[[]]]]],"^1:","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."],"^B","~$reagent.core/force-update-all","^Z","cljs-temp/reagent/core.cljs","^12",23,"^1?",["^14",[[]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",90,"^1K","^1G","^11",90,"^1>",0,"^1H",true,"^13",["^14",["^15",["^14",[[]]]]],"^1:","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."],"~$as-element",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",47,"^10",7,"^11",47,"^12",17,"^13",["^14",["^15",["^14",[["~$form"]]]]],"^1:","Turns a vector of Hiccup syntax into a React element. Returns form\n  unchanged if it is not a vector."],"^B","~$reagent.core/as-element","^Z","cljs-temp/reagent/core.cljs","^12",17,"^1?",["^14",[["^22"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",47,"^1K",["^>",[null,"^1G","^1F"]],"^11",47,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["^22"]]]]],"^1:","Turns a vector of Hiccup syntax into a React element. Returns form\n  unchanged if it is not a vector."],"~$rswap!",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",351,"^10",7,"^11",351,"^12",13,"^13",["^14",["^15",["^14",[["~$a","~$f","~$&","~$args"]]]]],"^1:","Swaps the value of a to be `(apply f current-value-of-atom args)`.\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed â€“ and it always returns nil.","^1;",["^ ","^1<",true,"^1=",2,"^1>",2,"^1?",[["^14",["~$a","~$f","^25"]]],"^13",["^14",[["~$a","~$f","~$&","^25"]]],"^1@",["^14",[null]]]],"^B","~$reagent.core/rswap!","^Z","cljs-temp/reagent/core.cljs","^12",13,"^1;",["^ ","^1<",true,"^1=",2,"^1>",2,"^1?",[["^14",["~$a","~$f","^25"]]],"^13",["^14",[["~$a","~$f","~$&","^25"]]],"^1@",["^14",[null]]],"^1?",[["^14",["~$a","~$f","^25"]]],"^1B",null,"^1=",2,"^1@",["^14",[null]],"^10",1,"^1<",true,"^1C",[["^ ","^1=",2,"^1<",true,"^1D","^1E"]],"^[",351,"^1K","^1G","^11",351,"^1>",2,"^1H",true,"^13",["^14",[["~$a","~$f","~$&","^25"]]],"^1:","Swaps the value of a to be `(apply f current-value-of-atom args)`.\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed â€“ and it always returns nil."],"~$next-tick",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",372,"^10",7,"^11",372,"^12",16,"^13",["^14",["^15",["^14",[["~$f"]]]]],"^1:","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered."],"^B","~$reagent.core/next-tick","^Z","cljs-temp/reagent/core.cljs","^12",16,"^1?",["^14",[["~$f"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",372,"^1K","^1G","^11",372,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["~$f"]]]]],"^1:","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered."],"~$track",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",258,"^10",7,"^11",258,"^12",12,"^13",["^14",["^15",["^14",[["~$f","~$&","^25"]]]]],"^1:","Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, `@(track foo bar)` will produce the same result\n  as `(foo bar)`, but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref.","^1;",["^ ","^1<",true,"^1=",1,"^1>",1,"^1?",[["^14",["~$f","^25"]]],"^13",["^14",[["~$f","~$&","^25"]]],"^1@",["^14",[null]]]],"^B","~$reagent.core/track","^Z","cljs-temp/reagent/core.cljs","^12",12,"^1;",["^ ","^1<",true,"^1=",1,"^1>",1,"^1?",[["^14",["~$f","^25"]]],"^13",["^14",[["~$f","~$&","^25"]]],"^1@",["^14",[null]]],"^1?",[["^14",["~$f","^25"]]],"^1B",null,"^1=",1,"^1@",["^14",[null]],"^10",1,"^1<",true,"^1C",[["^ ","^1=",1,"^1<",true,"^1D","~$reagent.ratom/Track"]],"^[",258,"^1K","^1G","^11",258,"^1>",1,"^1H",true,"^13",["^14",[["~$f","~$&","^25"]]],"^1:","Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, `@(track foo bar)` will produce the same result\n  as `(foo bar)`, but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref."],"^1X",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",196,"^10",7,"^11",196,"^12",12,"^13",["^14",["^15",["^14",[["~$this"]]]]],"^1:","Returns the props passed to a component."],"^B","~$reagent.core/props","^Z","cljs-temp/reagent/core.cljs","^12",12,"^1?",["^14",[["^2<"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",196,"^1K",["^>",[null,"^1G","^1E"]],"^11",196,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns the props passed to a component."],"~$dispose!",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",282,"^10",7,"^11",282,"^12",15,"^13",["^14",["^15",["^14",[["~$x"]]]]],"^1:","Stop the result of track! from updating."],"^B","~$reagent.core/dispose!","^Z","cljs-temp/reagent/core.cljs","^12",15,"^1?",["^14",[["~$x"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",282,"^1K","^1G","^11",282,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["~$x"]]]]],"^1:","Stop the result of track! from updating."],"~$state-atom",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",155,"^10",7,"^11",155,"^12",17,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns an atom containing a components state."],"^B","~$reagent.core/state-atom","^Z","cljs-temp/reagent/core.cljs","^12",17,"^1?",["^14",[["^2<"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",155,"^1K",["^>",[null,"^1G"]],"^11",155,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns an atom containing a components state."],"^@",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",241,"^10",7,"^11",241,"^12",12,"^13",["^14",["^15",["^14",[[]]]]],"^1:","Render dirty components immediately to the DOM.\n\n  Note that this may not work in event handlers, since React.js does\n  batching of updates there."],"^B","~$reagent.core/flush","^Z","cljs-temp/reagent/core.cljs","^12",12,"^1?",["^14",[[]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",241,"^1K","^1G","^11",241,"^1>",0,"^1H",true,"^13",["^14",["^15",["^14",[[]]]]],"^1:","Render dirty components immediately to the DOM.\n\n  Note that this may not work in event handlers, since React.js does\n  batching of updates there."],"~$children",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",202,"^10",7,"^11",202,"^12",15,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns the children passed to a component."],"^B","~$reagent.core/children","^Z","cljs-temp/reagent/core.cljs","^12",15,"^1?",["^14",[["^2<"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",202,"^1K",["^>",[null,"^1Z","^1G","^1E"]],"^11",202,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns the children passed to a component."],"~$wrap",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",287,"^10",7,"^11",287,"^12",11,"^13",["^14",["^15",["^14",[["~$value","~$reset-fn","~$&","^25"]]]]],"^1:","Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  ```cljs\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n  ```\n\n  Probably useful only for passing to child components.","^1;",["^ ","^1<",true,"^1=",2,"^1>",2,"^1?",[["^14",["^2F","^2G","^25"]]],"^13",["^14",[["^2F","^2G","~$&","^25"]]],"^1@",["^14",[null]]]],"^B","~$reagent.core/wrap","^Z","cljs-temp/reagent/core.cljs","^12",11,"^1;",["^ ","^1<",true,"^1=",2,"^1>",2,"^1?",[["^14",["^2F","^2G","^25"]]],"^13",["^14",[["^2F","^2G","~$&","^25"]]],"^1@",["^14",[null]]],"^1?",[["^14",["^2F","^2G","^25"]]],"^1B",null,"^1=",2,"^1@",["^14",[null]],"^10",1,"^1<",true,"^1C",[["^ ","^1=",2,"^1<",true,"^1D","~$reagent.ratom/Wrapper"]],"^[",287,"^1K","^1G","^11",287,"^1>",2,"^1H",true,"^13",["^14",[["^2F","^2G","~$&","^25"]]],"^1:","Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  ```cljs\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n  ```\n\n  Probably useful only for passing to child components."],"~$reactify-component",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",60,"^10",7,"^11",60,"^12",25,"^13",["^14",["^15",["^14",[["~$c"]]]]],"^1:","Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map."],"^B","~$reagent.core/reactify-component","^Z","cljs-temp/reagent/core.cljs","^12",25,"^1?",["^14",[["~$c"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",60,"^1K",["^>",[null,"^1G"]],"^11",60,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["~$c"]]]]],"^1:","Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map."],"~$unmount-component-at-node",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",81,"^10",7,"^11",81,"^12",32,"^13",["^14",["^15",["^14",[["~$container"]]]]],"^1:","Remove a component from the given DOM node."],"^B","~$reagent.core/unmount-component-at-node","^Z","cljs-temp/reagent/core.cljs","^12",32,"^1?",["^14",[["^2M"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",81,"^1K","^1G","^11",81,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["^2M"]]]]],"^1:","Remove a component from the given DOM node."],"~$render-component",["^ ","^B","~$reagent.core/render-component","^Z","cljs-temp/reagent/core.cljs","^[",88,"^10",1,"^11",88,"^12",22,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",88,"^10",6,"^11",88,"^12",22]],"~$component-path",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",392,"^10",7,"^11",392,"^12",21,"^13",["^14",["^15",["^14",[["~$c"]]]]]],"^B","~$reagent.core/component-path","^Z","cljs-temp/reagent/core.cljs","^12",21,"^1?",["^14",[["~$c"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",392,"^1K",["^>",["^1F","^1E"]],"^11",392,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["~$c"]]]]]],"~$cursor",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",312,"^10",7,"^11",312,"^12",13,"^13",["^14",["^15",["^14",[["~$src","~$path"]]]]],"^1:","Provide a cursor into a Reagent atom.\n\n  Behaves like a Reagent atom but focuses updates and derefs to\n  the specified path within the wrapped Reagent atom. e.g.,\n\n  ```cljs\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n  ```\n\n  The first parameter can also be a function, that should look\n  something like this:\n\n  ```cljs\n  (defn set-get\n    ([k] (get-in @state k))\n    ([k v] (swap! state assoc-in k v)))\n  ```\n\n  The function will be called with one argument â€“ the path passed to\n  cursor â€“ when the cursor is deref'ed, and two arguments (path and\n  new value) when the cursor is modified.\n\n  Given that set-get function, (and that state is a Reagent atom, or\n  another cursor) these cursors are equivalent:\n  `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n\n  Note that a cursor is lazy: its value will not change until it is\n  used. This may be noticed with add-watch."],"^B","~$reagent.core/cursor","^Z","cljs-temp/reagent/core.cljs","^12",13,"^1?",["^14",[["^2T","^2U"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",312,"^1K","~$reagent.ratom/RCursor","^11",312,"^1>",2,"^1H",true,"^13",["^14",["^15",["^14",[["^2T","^2U"]]]]],"^1:","Provide a cursor into a Reagent atom.\n\n  Behaves like a Reagent atom but focuses updates and derefs to\n  the specified path within the wrapped Reagent atom. e.g.,\n\n  ```cljs\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n  ```\n\n  The first parameter can also be a function, that should look\n  something like this:\n\n  ```cljs\n  (defn set-get\n    ([k] (get-in @state k))\n    ([k v] (swap! state assoc-in k v)))\n  ```\n\n  The function will be called with one argument â€“ the path passed to\n  cursor â€“ when the cursor is deref'ed, and two arguments (path and\n  new value) when the cursor is modified.\n\n  Given that set-get function, (and that state is a Reagent atom, or\n  another cursor) these cursors are equivalent:\n  `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n\n  Note that a cursor is lazy: its value will not change until it is\n  used. This may be noticed with add-watch."],"~$state",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",161,"^10",7,"^11",161,"^12",12,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns the state of a component, as set with replace-state or set-state.\n  Equivalent to `(deref (r/state-atom this))`"],"^B","~$reagent.core/state","^Z","cljs-temp/reagent/core.cljs","^12",12,"^1?",["^14",[["^2<"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",161,"^1K","^1G","^11",161,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns the state of a component, as set with replace-state or set-state.\n  Equivalent to `(deref (r/state-atom this))`"],"~$dom-node",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",214,"^10",7,"^11",214,"^12",15,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns the root DOM node of a mounted component."],"^B","~$reagent.core/dom-node","^Z","cljs-temp/reagent/core.cljs","^12",15,"^1?",["^14",[["^2<"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",214,"^1K","^1G","^11",214,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns the root DOM node of a mounted component."],"~$track!",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",274,"^10",7,"^11",274,"^12",13,"^13",["^14",["^15",["^14",[["~$f","~$&","^25"]]]]],"^1:","An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!.","^1;",["^ ","^1<",true,"^1=",1,"^1>",1,"^1?",[["^14",["~$f","^25"]]],"^13",["^14",[["~$f","~$&","^25"]]],"^1@",["^14",[null]]]],"^B","~$reagent.core/track!","^Z","cljs-temp/reagent/core.cljs","^12",13,"^1;",["^ ","^1<",true,"^1=",1,"^1>",1,"^1?",[["^14",["~$f","^25"]]],"^13",["^14",[["~$f","~$&","^25"]]],"^1@",["^14",[null]]],"^1?",[["^14",["~$f","^25"]]],"^1B",null,"^1=",1,"^1@",["^14",[null]],"^10",1,"^1<",true,"^1C",[["^ ","^1=",1,"^1<",true,"^1D","^1G"]],"^[",274,"^1K","^1G","^11",274,"^1>",1,"^1H",true,"^13",["^14",[["~$f","~$&","^25"]]],"^1:","An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!."],"~$is-client",["^ ","^B","~$reagent.core/is-client","^Z","cljs-temp/reagent/core.cljs","^[",16,"^10",1,"^11",16,"^12",15,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",16,"^10",6,"^11",16,"^12",15],"^1D","~$boolean"],"~$replace-state",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",168,"^10",7,"^11",168,"^12",20,"^13",["^14",["^15",["^14",[["^2<","~$new-state"]]]]],"^1:","Set state of a component.\n  Equivalent to `(reset! (state-atom this) new-state)`"],"^B","~$reagent.core/replace-state","^Z","cljs-temp/reagent/core.cljs","^12",20,"^1?",["^14",[["^2<","^36"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",168,"^1K",["^>",[null,"^1G"]],"^11",168,"^1>",2,"^1H",true,"^13",["^14",["^15",["^14",[["^2<","^36"]]]]],"^1:","Set state of a component.\n  Equivalent to `(reset! (state-atom this) new-state)`"],"^A",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",387,"^10",7,"^11",387,"^12",14,"^13",["^14",["^15",["^14",[["~$f","~$&","^25"]]]]],"^1:","Works just like clojure.core/partial, but the result can be compared with =","^1;",["^ ","^1<",true,"^1=",1,"^1>",1,"^1?",[["^14",["~$f","^25"]]],"^13",["^14",[["~$f","~$&","^25"]]],"^1@",["^14",[null]]]],"^B","~$reagent.core/partial","^Z","cljs-temp/reagent/core.cljs","^12",14,"^1;",["^ ","^1<",true,"^1=",1,"^1>",1,"^1?",[["^14",["~$f","^25"]]],"^13",["^14",[["~$f","~$&","^25"]]],"^1@",["^14",[null]]],"^1?",[["^14",["~$f","^25"]]],"^1B",null,"^1=",1,"^1@",["^14",[null]],"^10",1,"^1<",true,"^1C",[["^ ","^1=",1,"^1<",true,"^1D","~$reagent.impl.util/PartialFn"]],"^[",387,"^1K","^1G","^11",387,"^1>",1,"^1H",true,"^13",["^14",[["~$f","~$&","^25"]]],"^1:","Works just like clojure.core/partial, but the result can be compared with ="],"~$set-state",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",176,"^10",7,"^11",176,"^12",16,"^13",["^14",["^15",["^14",[["^2<","^36"]]]]],"^1:","Merge component state with new-state.\n  Equivalent to `(swap! (state-atom this) merge new-state)`"],"^B","~$reagent.core/set-state","^Z","cljs-temp/reagent/core.cljs","^12",16,"^1?",["^14",[["^2<","^36"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",176,"^1K",["^>",[null,"^1G"]],"^11",176,"^1>",2,"^1H",true,"^13",["^14",["^15",["^14",[["^2<","^36"]]]]],"^1:","Merge component state with new-state.\n  Equivalent to `(swap! (state-atom this) merge new-state)`"],"~$argv",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",208,"^10",7,"^11",208,"^12",11,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns the entire Hiccup form passed to the component."],"^B","~$reagent.core/argv","^Z","cljs-temp/reagent/core.cljs","^12",11,"^1?",["^14",[["^2<"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",208,"^1K",["^>",["~$cljs.core/IVector","^1G"]],"^11",208,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["^2<"]]]]],"^1:","Returns the entire Hiccup form passed to the component."],"~$render",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",68,"^10",7,"^11",68,"^12",13,"^13",["^14",["^15",["^14",[["^I","^2M"],["^I","^2M","~$callback"]]]]],"^1:","Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.","^1;",["^ ","^1<",false,"^1=",3,"^1>",3,"^1?",["^14",[["^I","^2M"],["^I","^2M","^3@"]]],"^13",["^14",[["^I","^2M"],["^I","^2M","^3@"]]],"^1@",["^14",[null,null]]]],"^B","~$reagent.core/render","^Z","cljs-temp/reagent/core.cljs","^12",13,"^1;",["^ ","^1<",false,"^1=",3,"^1>",3,"^1?",["^14",[["^I","^2M"],["^I","^2M","^3@"]]],"^13",["^14",[["^I","^2M"],["^I","^2M","^3@"]]],"^1@",["^14",[null,null]]],"^1?",["^14",[["^I","^2M"],["^I","^2M","^3@"]]],"^1B",null,"^1=",3,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^1C",[["^ ","^1=",2,"^1<",false,"^1D","^1G"],["^ ","^1=",3,"^1<",false,"^1D","^1G"]],"^[",68,"^11",68,"^1>",3,"^1H",true,"^13",["^14",[["^I","^2M"],["^I","^2M","^3@"]]],"^1:","Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance."],"~$force-update",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",184,"^10",7,"^11",184,"^12",19,"^13",["^14",["^15",["^14",[["^2<"],["^2<","~$deep"]]]]],"^1:","Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed.","^1;",["^ ","^1<",false,"^1=",2,"^1>",2,"^1?",["^14",[["^2<"],["^2<","^3C"]]],"^13",["^14",[["^2<"],["^2<","^3C"]]],"^1@",["^14",[null,null]]]],"^B","~$reagent.core/force-update","^Z","cljs-temp/reagent/core.cljs","^12",19,"^1;",["^ ","^1<",false,"^1=",2,"^1>",2,"^1?",["^14",[["^2<"],["^2<","^3C"]]],"^13",["^14",[["^2<"],["^2<","^3C"]]],"^1@",["^14",[null,null]]],"^1?",["^14",[["^2<"],["^2<","^3C"]]],"^1B",null,"^1=",2,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^1C",[["^ ","^1=",1,"^1<",false,"^1D","^1G"],["^ ","^1=",2,"^1<",false,"^1D","^1G"]],"^[",184,"^11",184,"^1>",2,"^1H",true,"^13",["^14",[["^2<"],["^2<","^3C"]]],"^1:","Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed."],"~$create-class",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",105,"^10",7,"^11",105,"^12",19,"^13",["^14",["^15",["^14",[["~$spec"]]]]],"^1:","Creates JS class based on provided Clojure map, for example:\n\n  ```cljs\n  {;; Constructor\n   :constructor (fn [this props])\n   :get-initial-state (fn [this])\n   ;; Static methods\n   :get-derived-state-from-props (fn [props state] partial-state)\n   :get-derived-state-from-error (fn [error] partial-state)\n   ;; Methods\n   :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n   :should-component-update (fn [this old-argv new-argv])\n   :component-did-mount (fn [this])\n   :component-did-update (fn [this old-argv old-state snapshot])\n   :component-will-unmount (fn [this])\n   :component-did-catch (fn [this error info])\n   :reagent-render (fn [args....])\n   ;; Or alternatively:\n   :render (fn [this])\n   ;; Deprecated methods:\n   :UNSAFE_component-will-receive-props (fn [this new-argv])\n   :UNSAFE_component-will-update (fn [this new-argv new-state])\n   :UNSAFE_component-will-mount (fn [this])}\n  ```\n\n  Everything is optional, except either :reagent-render or :render.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n\n  State can be initialized using constructor, which matches React.Component class,\n  or using getInitialState which matches old React createClass function and is\n  now implemented by Reagent for compatibility.\n\n  State can usually be anything, e.g. Cljs object. But if using getDerivedState\n  methods, the state has to be plain JS object as React implementation uses\n  Object.assign to merge partial state into the current state.\n\n  React built-in static methods or properties are automatically defined as statics."],"^B","~$reagent.core/create-class","^Z","cljs-temp/reagent/core.cljs","^12",19,"^1?",["^14",[["^3F"]]],"^1B",null,"^1@",["^14",[null,null]],"^10",1,"^1<",false,"^[",105,"^1K","~$function","^11",105,"^1>",1,"^1H",true,"^13",["^14",["^15",["^14",[["^3F"]]]]],"^1:","Creates JS class based on provided Clojure map, for example:\n\n  ```cljs\n  {;; Constructor\n   :constructor (fn [this props])\n   :get-initial-state (fn [this])\n   ;; Static methods\n   :get-derived-state-from-props (fn [props state] partial-state)\n   :get-derived-state-from-error (fn [error] partial-state)\n   ;; Methods\n   :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n   :should-component-update (fn [this old-argv new-argv])\n   :component-did-mount (fn [this])\n   :component-did-update (fn [this old-argv old-state snapshot])\n   :component-will-unmount (fn [this])\n   :component-did-catch (fn [this error info])\n   :reagent-render (fn [args....])\n   ;; Or alternatively:\n   :render (fn [this])\n   ;; Deprecated methods:\n   :UNSAFE_component-will-receive-props (fn [this new-argv])\n   :UNSAFE_component-will-update (fn [this new-argv new-state])\n   :UNSAFE_component-will-mount (fn [this])}\n  ```\n\n  Everything is optional, except either :reagent-render or :render.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n\n  State can be initialized using constructor, which matches React.Component class,\n  or using getInitialState which matches old React createClass function and is\n  now implemented by Reagent for compatibility.\n\n  State can usually be anything, e.g. Cljs object. But if using getDerivedState\n  methods, the state has to be plain JS object as React implementation uses\n  Object.assign to merge partial state into the current state.\n\n  React built-in static methods or properties are automatically defined as statics."],"~$create-element",["^ ","^X",null,"^Y",["^ ","^Z","/Users/brian/patroclus/cljs-temp/reagent/core.cljs","^[",18,"^10",7,"^11",18,"^12",21,"^13",["^14",["^15",["^14",[["~$type"],["^3J","^1X"],["^3J","^1X","~$child"],["^3J","^1X","^3K","~$&","^2C"]]]]],"^1:","Create a native React element, by calling React.createElement directly.\n\n  That means the second argument must be a javascript object (or nil), and\n  that any Reagent hiccup forms must be processed with as-element. For example\n  like this:\n\n  ```cljs\n  (r/create-element \"div\" #js{:className \"foo\"}\n    \"Hi \" (r/as-element [:strong \"world!\"])\n  ```\n\n  which is equivalent to\n\n  ```cljs\n  [:div.foo \"Hi\" [:strong \"world!\"]]\n  ```","^1;",["^ ","^1<",true,"^1=",3,"^1>",3,"^1?",["^14",[["^3J"],["^3J","^1X"],["^3J","^1X","^3K"]]],"^13",["^14",[["^3J"],["^3J","^1X"],["^3J","^1X","^3K"],["^3J","^1X","^3K","~$&","^2C"]]],"^1@",["^14",[null,null,null,null]]]],"^B","~$reagent.core/create-element","^Z","cljs-temp/reagent/core.cljs","^12",21,"^1;",["^ ","^1<",true,"^1=",3,"^1>",3,"^1?",["^14",[["^3J"],["^3J","^1X"],["^3J","^1X","^3K"]]],"^13",["^14",[["^3J"],["^3J","^1X"],["^3J","^1X","^3K"],["^3J","^1X","^3K","~$&","^2C"]]],"^1@",["^14",[null,null,null,null]]],"^1?",["^14",[["^3J"],["^3J","^1X"],["^3J","^1X","^3K"]]],"^1B",null,"^1=",3,"^1@",["^14",[null,null,null,null]],"^10",1,"^1<",true,"^1C",[["^ ","^1=",1,"^1<",false,"^1D","^1G"],["^ ","^1=",2,"^1<",false,"^1D","^1G"],["^ ","^1=",3,"^1<",false,"^1D","^1G"],["^ ","^1=",3,"^1<",true,"^1D","^1G"]],"^[",18,"^11",18,"^1>",3,"^1H",true,"^13",["^14",[["^3J"],["^3J","^1X"],["^3J","^1X","^3K"],["^3J","^1X","^3K","~$&","^2C"]]],"^1:","Create a native React element, by calling React.createElement directly.\n\n  That means the second argument must be a javascript object (or nil), and\n  that any Reagent hiccup forms must be processed with as-element. For example\n  like this:\n\n  ```cljs\n  (r/create-element \"div\" #js{:className \"foo\"}\n    \"Hi \" (r/as-element [:strong \"world!\"])\n  ```\n\n  which is equivalent to\n\n  ```cljs\n  [:div.foo \"Hi\" [:strong \"world!\"]]\n  ```"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^C","^C","^Q","^K","^K","^K","^R","^6","^6","^6"],"^1:",null]